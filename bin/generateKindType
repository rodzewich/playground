#!/usr/bin/env node
"use strict";

var ts       = require("typescript"),
    fs       = require("fs"),
    path     = require("path"),
    deferred = require("../lib/deferred"),
    mkdir    = require("../lib/mkdir"),
    argv     = require("optimist").
        usage("Usage: generateKindType -o [filename]\nGenerate actual KindType class.").
        demand("o").alias("o", "output").describe("o", "Output file location").
        argv,
    output   = path.join(process.cwd(), argv.output);

deferred([
    function (next) {
        mkdir(path.dirname(output), function (error) {
            if (!error) {
                next();
            } else {
                console.log(error.stack);
            }
        });
    },
    function (next) {
        var keys,
            kinds = {},
            content;
        Object.keys(ts.SyntaxKind)
            .filter(function (key) {
                return /^\d+$/.test(String(key));
            })
            .forEach(function (key) {
                kinds[ts.SyntaxKind[key].replace(/([a-z])([A-Z])/g, "$1_$2").toUpperCase()] = parseInt(key, 10);
            });
        keys = Object.keys(kinds);
        keys.sort();
        content = [
            "/******************************************************************************",
            " *                   THIS FILE WAS AUTOMATICALLY GENERATED.                   *",
            " *                    PLEASE DON'T EDIT THIS FILE BY HAND.                    *",
            " ******************************************************************************/", "",
            "class KindType {", "",
            "    private _value:number;", "",
            "    constructor(value:number) {",
            "        this._value = value;",
            "    }", "",
            "    public getValue():number {",
            "        return this._value;",
            "    }", "",
            "    public equal(value:any):boolean {",
            "        if (value instanceof KindType) {",
            "            return this._value === (<KindType>value).getValue();",
            "        }",
            "        return this._value === value;",
            "    }", "",
            keys.map(function (type) {
                return "    public static " + type + ":KindType = new KindType(" + String(kinds[type]) + ");";
            }).join("\n"),
            "", "}", "",
            "export = KindType;", ""
        ].join("\n");
        fs.writeFile(output, content, function (error) {
            if (!error) {
                next();
            } else {
                console.log(error.stack);
            }
        });
    },
    function () {
        console.log("output:", output);
    }
]);
