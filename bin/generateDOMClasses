#!/usr/bin/env node
var optimist  = require("optimist"),
    deferred  = require("../lib/deferred"),
    parallel  = require("../lib/parallel"),
    mkdir     = require("../lib/mkdir"),
    typeOf    = require("../lib/typeOf"),
    path      = require("path"),
    fs        = require("fs"),
    colors    = require("colors"),
    getobject = require("getobject"),
    argv      = require("optimist").
        usage("Usage: generateDOMClasses -d [directory]\nGenerate document object model classes").
        demand("d").alias("d", "directory").describe("d", "Output directory").
        argv,
    directory = path.isAbsolute(argv.directory) ?
        path.normalize(argv.directory) :
        path.join(process.cwd(), argv.directory);

var entities = {
    core : {
        attrs : [
            {
                name : "id"
            }
        ]
    }
};

var elements = {
    html: {
        allowTags: ["a", "b"]
    },
    body: {},
    head: {}
};

var actions = [];

function allowTags(tagName) {
    var allowTags = getobject.get(elements, tagName + ".allowTags");
    if (typeOf(allowTags) === "array") {
        return allowTags.map(function (tag) {
            return String(tag);
        });
    }
    return null
}

function attributes(tagName) {
    return [
        {
            name: "href",
            required: true
        }
    ];
}

function message(content, params) {
    var result;
    if (typeOf(content) === "array") {
        result = content.join("\n");
    } else {
        result = String(content);
    }
    return result.replace(/\{([a-z]+)\}/ig, function () {
        return params[arguments[1]];
    });
}

function setterName(tagName, attrName) {
    var attrs  = attributes(tagName),
        length = attrs.length,
        index;
    for (index = 0; index < length; index++) {
        if (getobject.get(attrs[index], "setter")) {
            return getobject.get(attrs[index], "setter");
        }
    }
    return "set" + attrName.slice(0, 1).toUpperCase() + attrName.slice(1);
}

function getterName(tagName, attrName) {
    var attrs  = attributes(tagName),
        length = attrs.length,
        index;
    for (index = 0; index < length; index++) {
        if (getobject.get(attrs[index], "getter")) {
            return getobject.get(attrs[index], "getter");
        }
    }
    return "get" + attrName.slice(0, 1).toUpperCase() + attrName.slice(1);
}

Object.keys(elements).forEach(function (element) {
    var object = elements[element];
    actions.push(function (next) {
        var elementDirectory = path.join(directory, "elements", element);
        deferred([
            function (next) {
                mkdir(elementDirectory, next);
            },
            function (next) {
                var binary  = !getobject.get(object, "unary"),
                    content = [
                        "/******************************************************************************",
                        " *                   THIS FILE WAS AUTOMATICALLY GENERATED.                   *",
                        " *                    PLEASE DON'T EDIT THIS FILE BY HAND.                    *",
                        " ******************************************************************************/",
                        "",
                        "import ElementBase = require(\"../Element\");",
                        "import IElement = require(\"./IElement\");",
                        "import IOptions = require(\"./IOptions\");",
                        attributes(element).map(function (attr) {
                            var name = getobject.get(attr, "name");
                            var nameCamel = name.slice(0, 1).toUpperCase() + name.slice(1);
                            return [
                                "import I" + nameCamel + "Attr = require(\"../../attributes/" + element + "/I" + nameCamel + "\")",
                                "import " + nameCamel + "Attr = require(\"../../attributes/" + element + "/" + nameCamel + "\")"
                            ].join("\n");
                        }).join("\n"),
                        "",
                        "class Element extends ElementBase implements IElement {", "",
                        "    protected _tagName:string = " + JSON.stringify(element) + ";", "",
                        "    protected _binary:boolean = " + JSON.stringify(binary) + ";", "",
                        "    protected _allowTags:string[] = " + JSON.stringify(allowTags(element)) + ";", "",
                        "    constructor(options?:IOptions) {",
                        "        super(options);",
                        attributes(element).
                            map(function (attr) {
                                var name   = getobject.get(attr, "name"),
                                    setter = setterName(element, name);
                                return message([
                                    '        if (options && "{name}" in options) {',
                                    '            this.{setter}(options.{name});',
                                    '        }'
                                ], {
                                    name   : name,
                                    setter : setter
                                });
                            })
                            .join("\n"),
                        attributes(element)
                            .filter(function (attr) {
                                return getobject.get(attr, "required");
                            })
                            .map(function (attr) {
                                var name = getobject.get(attr, "name");
                                return [
                                    "        if (!options || !options." + name + ") {",
                                    "            throw new Error(\"Option \\\"" + name + "\\\" is required.\")",
                                    "        }"
                                ].join("\n");
                            }).join("\n"),
                        "    }", "",
                        attributes(element).map(function (attr) {
                            var name  = getobject.get(attr, "name"),
                                type  = getobject.get(attr, "type") || "any",
                                camel = name.slice(0, 1).toUpperCase() + name.slice(1);
                            return message([
                                "    private _{name}Attr:I{camel}Attr;", "",
                                "    protected create{camel}Attr():I{camel}Attr {",
                                "        return new {camel}Attr();",
                                "    }", "",
                                "    protected get{camel}Attr():I{camel}Attr {",
                                "        if (!this._{name}Attr) {",
                                "            this._{name}Attr = this.create{camel}Attr();",
                                "            this.registryAttr(this._{name}Attr);",
                                "        }",
                                "        return this._{name}Attr;",
                                "    }", "",
                                "    public {getter}():{type} {",
                                "        return this.get{camel}Attr().getValue();",
                                "    }", "",
                                "    public {setter}(value:{type}):void {",
                                "        this.set{camel}Attr().setValue(value);",
                                "    }", ""
                            ], {
                                name   : name,
                                type   : type,
                                camel  : camel,
                                getter : getterName(element, name),
                                setter : setterName(element, name)
                            });
                        }).join("\n"),
                        "}",
                        "",
                        "export = Element;",
                        ""
                    ].join("\n");
                fs.writeFile(path.join(elementDirectory, "Element.ts"), content, function () {
                    console.log(colors.green("output"), path.join(elementDirectory, "Element.ts"));
                    next();
                });
            },
            function (next) {
                var content = [
                    "/******************************************************************************",
                    " *                   THIS FILE WAS AUTOMATICALLY GENERATED.                   *",
                    " *                    PLEASE DON'T EDIT THIS FILE BY HAND.                    *",
                    " ******************************************************************************/",
                    "",
                    "interface IElement extends IElementBase {",
                    "}",
                    "",
                    "export = IElement;",
                    ""
                ].join("\n");
                fs.writeFile(path.join(elementDirectory, "IElement.ts"), content, function () {
                    console.log(colors.green("output"), path.join(elementDirectory, "IElement.ts"));
                    next();
                });
            },
            function () {
                next();
            }
        ]);
    });
});

actions.push(function () {
    console.log("Successfully completed");
});

deferred(actions);

return;


var config = {

    attributesCoreAttrs : {
        includes   : [],
        attributes : [
            {
                name : "id",
                options : {
                    imports : {},
                    name    : "id",
                    type    : "string"
                },
                interfaces : {
                    imports    : {},
                    implements : [
                        "getId():string;",
                        "setId(value:string):void;"
                    ]
                },
                classes : {
                    imports : {
                        IIdAttr : "attributes/core/id/IIdAttr.ts",
                        IdAttr  : "attributes/core/id/IdAttr.ts"
                    },
                    implements : [
                        [
                            "private _idAttr:IIdAttr;", "",
                            "protected createIdAttr():IIdAttr {",
                            "    return new IdAttr(this);",
                            "}", "",
                            "protected getIdAttr():IIdAttr {",
                            "    if (!this._idAttr) {",
                            "        this._idAttr = this.createIdAttr();",
                            "    }",
                            "    return this._idAttr;",
                            "}", "",
                            "public getId():string {",
                            "    this.getIdAttr().getValue();",
                            "}", "",
                            "public setId(value:string):void {",
                            "    this.getIdAttr().setValue(value);",
                            "}", ""
                        ]
                    ]
                }
            }
        ]
    },

    internalClass1: ["span", "div", "table"],
    internalClass2: ["strong", "col"],
    attributesClass1 : [["align", "string"], ["styles","any"]],
    attributesClass2 : [["classes", "string[]"]],
    tagA: {
        internal: {
            extend: ["class1", "class2"],
            tags : ["tag1", "tag2"]
        },
        attributes: {
            extend: ["class1", "class2"],
            attrs: [["attr1", "any"], ["attr2", "any"]]
        },
        listeners: {
            extend: ["class1", "class2"],
            listeners: ["listener1", "listener2"]
        }
    },
    tagStrong: {

    },
    tagSpan: {

    },
    tagDiv: {

    },
    tagHtml: {

    },
    tagHead: {

    },
    tagTitle: {

    }
};

function internal(classes, tags) {
    var result = [];
    function add(elements) {
        elements.forEach(function (element) {
            if (result.indexOf(element) === -1) {
                result.push(element);
            }
        });
    }
    classes.forEach(function (element) {
        var elements = config["internal" + element.slice(0, 1).toUpperCase() + element.slice(1)];
        if (elements) {
            add(elements);
        } else {
            console.log("bla bla bla");
        }
    });
    if (tags) {
        add(tags);
    }
    return result;
}

/*
function attributes(classes, attrs) {
    var result = [];
    function add(elements) {
        elements.forEach(function (element) {
            if (result.indexOf(element) === -1) {
                result.push(element);
            }
        });
    }
    classes.forEach(function (element) {
        var elements = config["attributes" + element.slice(0, 1).toUpperCase() + element.slice(1)];
        if (elements) {
            add(elements);
        } else {
            console.log("bla bla bla");
        }
    });
    if (attrs) {
        add(attrs);
    }
    return result;
}
*/

deferred([
    function (next) {
        mkdir(directory, function (errors) {
            if (errors && errors.length) {
                errors.forEach(function (error) {
                    console.log(error.stack);
                });
            } else {
                next();
            }
        });
    },
    function (next) {
        var actions = [];
        Object.keys(config)
            .filter(function (key) {
                return /^tag[A-Z][a-z]*$/.test(key);
            })
            .forEach(function (key) {
                var tagName = key.slice(3).toLowerCase();
                var element = config[key];
                var internalExtend = [];
                var internalTags = [];
                var attributesExtend = [];
                var attributesAttrs = [];
                if (element.internal && element.internal.extend) {
                    internalExtend = element.internal.extend;
                }
                if (element.internal && element.internal.tags) {
                    internalTags = element.internal.tags;
                }
                if (element.attributes && element.attributes.extend) {
                    attributesExtend = element.attributes.extend;
                }
                if (element.attributes && element.attributes.attrs) {
                    attributesAttrs = element.attributes.attrs;
                }
                actions.push(function (done) {
                    deferred([
                        function (next) {
                            mkdir(path.join(directory, "elements", tagName), function (errors) {
                                if (errors && errors.length) {
                                    errors.forEach(function (error) {
                                        console.log(error.stack);
                                    });
                                } else {
                                    next();
                                }
                            });
                        },
                        function (next) {
                            var content = [
                                "interface IElement<T> {",
                                "}", "",
                                "export = IElement;", ""
                            ];
                            fs.writeFile(path.join(directory, "elements", tagName, "IElement.ts"), content.join("\n"), function (error) {
                                if (error) {
                                    console.log(error);
                                } else {
                                    next();
                                }
                            });
                        },
                        function (next) {
                            var content = [
                                "interface IListeners<T> {",
                                "}", "",
                                "export = IListeners;", ""
                            ];
                            fs.writeFile(path.join(directory, "elements", tagName, "IListeners.ts"), content.join("\n"), function (error) {
                                if (error) {
                                    console.log(error);
                                } else {
                                    next();
                                }
                            });
                        },
                        function (next) {
                            var internalElements = internal(internalExtend, internalTags);
                            var attributeElements = attributes(attributesExtend, attributesAttrs);
                            var content = [
                                internalElements.map(function (element) {
                                    return "import I" + element.slice(0, 1).toUpperCase() + element.slice(1) + "Element = require(\"../" + element + "/IElement\");";
                                }).join("\n"),
                                "import IListeners = require(\"./IListeners\");",
                                "import IOptionsBase = require(\"../IOptions\");",
                                "",
                                "interface IOptions<T> extends IOptionsBase<T>{",
                                attributeElements.map(function (attribute) {
                                    return "    " + attribute[0] + "?:" + attribute[1] + ";";
                                }).join("\n"),
                                "    listeners?: IListeners<T>;",
                                internalElements.length ?
                                    "    items?: (\n" +
                                    internalElements.map(function (element) {
                                        return "        I" + element.slice(0, 1).toUpperCase() + element.slice(1) + "Element<T>";
                                    }).join(" |\n") +
                                    "\n    );"
                                    :
                                    "",
                                "}", "",
                                "export = IOptions;", ""
                            ];
                            fs.writeFile(path.join(directory, "elements", tagName, "IOptions.ts"), content.join("\n"), function (error) {
                                if (error) {
                                    console.log(error);
                                } else {
                                    next();
                                }
                            });
                        },
                        done
                    ]);
                });
            });
        parallel(actions, next);
    }
]);